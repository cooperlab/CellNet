LOCAL_HOME = /usr/local/
SDK_HOME = /home//CellNet
OBJ_DIR = $(SDK_HOME)/obj
SRC_DIR = $(SDK_HOME)/src

# Define C++ compiler
CCC	          = /usr/bin/g++

# Define C compiler options
CFLAGS        = -Wall -c -O2

# Define C++ compiler options
CCCFLAGS      = -Wall -c -O2 -D__STDC_CONSTANT_MACROS

# Define Includes
CPPFLAGS =  -std=c++11
CPPFLAGS += -I$(SDK_HOME)/include                                       # Inclu$
CPPFLAGS += -I$(LOCAL_HOME)/include
CPPFLAGS += -I$(LOCAL_HOME)/include/opencv
CPPFLAGS += -I$(LOCAL_HOME)/include/openslide                           # Inclu$
CPPFLAGS += -I/usr/include/glib-2.0                             # Include glib $
CPPFLAGS += -I/usr/lib/glib-2.0/include                 # Include glib
CPPFLAGS += -I/usr/lib/x86_64-linux-gnu/glib-2.0/include                 # Incl$
CPPFLAGS += -I$(LOCAL_HOME)/include/caffe/                              # Inclu$
CPPFLAGS += -I$(LOCAL_HOME)/cuda-7.0/include

# Define location of OpenCV
CV_LIBS       = -L$(LOCAL_HOME)/lib/ -lopencv_core -lopencv_imgproc -lopencv_highgui -lopencv_imgproc -lpthread -L$(LOCAL_HOME)/lib/x86_64-linux-gnu -lboost_system -lboost_thread -lhdf5 -lcaffe -lglog

# Define location of X Windows libraries and the X11 library names
XLIBS         = -L/usr/X11R6/lib -L/usr/lib -lX11

# Define location of OpenSlide
SLIDE_LIBS =    -L$(LOCAL_HOME)/lib/ -lglib-2.0 -lopenslide

# Include cuda libs
CUDA_LIBS =    -L$(LOCAL_HOME)/cuda/lib64 -lcudart -lcuda -lcublas

# Define libraries to be linked with
LIBS	      =  -lm $(XLIBS) $(CV_LIBS) $(SLIDE_LIBS) $(CUDA_LIBS)

# Define linker
LINKER	      = g++

# Define all object files to be the same as CPPSRCS but with all the .cpp and .c suffixes replaced with .o
OBJ           =  $(patsubst $(SRC_DIR)/%.cpp, $(OBJ_DIR)/%.o, $(CPPSRCS))
OBJ2           =  $(patsubst $(SRC_DIR)/%.cpp, $(OBJ_DIR)/%.o, $(CPPSRCS2))
OBJ3           =  $(patsubst $(SRC_DIR)/%.cpp, $(OBJ_DIR)/%.o, $(CPPSRCS3))
OBJ4           =  $(patsubst $(SRC_DIR)/%.cpp, $(OBJ_DIR)/%.o, $(CPPSRCS4))

# Define name of target executable
PROGRAM	      = preprocess_stream
PROGRAM2      = prediction_stream
PROGRAM3      = test_net
PROGRAM4      = train_net

# Define all C++ source files here
CPPSRCS       = $(SRC_DIR)/preprocess_stream.cpp $(SRC_DIR)/graph_net.cpp $(SRC_DIR)/utils.cpp $(SRC_DIR)/node.cpp $(SRC_DIR)/edge.cpp $(SRC_DIR)/laplacian_pyramid_node.cpp  $(SRC_DIR)/read_node.cpp $(SRC_DIR)/debug_node.cpp $(SRC_DIR)/write_png_node.cpp $(SRC_DIR)/write_hdf5_node.cpp $(SRC_DIR)/grayscale_node.cpp $(SRC_DIR)/train_node.cpp $(SRC_DIR)/prediction_node.cpp $(SRC_DIR)/write_pipe_node.cpp $(SRC_DIR)/read_pipe_node.cpp $(SRC_DIR)/prediction_pipe_node.cpp $(SRC_DIR)/augmentation_node.cpp

CPPSRCS2       = $(SRC_DIR)/prediction_stream.cpp $(SRC_DIR)/graph_net.cpp $(SRC_DIR)/utils.cpp $(SRC_DIR)/node.cpp $(SRC_DIR)/edge.cpp $(SRC_DIR)/laplacian_pyramid_node.cpp $(SRC_DIR)/read_node.cpp $(SRC_DIR)/debug_node.cpp $(SRC_DIR)/write_png_node.cpp $(SRC_DIR)/write_hdf5_node.cpp $(SRC_DIR)/grayscale_node.cpp $(SRC_DIR)/train_node.cpp $(SRC_DIR)/prediction_node.cpp $(SRC_DIR)/write_pipe_node.cpp $(SRC_DIR)/read_pipe_node.cpp $(SRC_DIR)/prediction_pipe_node.cpp $(SRC_DIR)/augmentation_node.cpp

CPPSRCS3       = $(SRC_DIR)/test_net.cpp $(SRC_DIR)/utils.cpp

CPPSRCS4       = $(SRC_DIR)/train_model.cpp $(SRC_DIR)/graph_net.cpp $(SRC_DIR)/utils.cpp $(SRC_DIR)/node.cpp $(SRC_DIR)/edge.cpp $(SRC_DIR)/laplacian_pyramid_node.cpp $(SRC_DIR)/read_node.cpp $(SRC_DIR)/debug_node.cpp $(SRC_DIR)/write_png_node.cpp $(SRC_DIR)/write_hdf5_node.cpp $(SRC_DIR)/grayscale_node.cpp $(SRC_DIR)/train_node.cpp $(SRC_DIR)/prediction_node.cpp $(SRC_DIR)/write_pipe_node.cpp $(SRC_DIR)/read_pipe_node.cpp $(SRC_DIR)/prediction_pipe_node.cpp $(SRC_DIR)/augmentation_node.cpp

##############################################################################
# Define additional rules that make should know about in order to compile our
# files.                                        
##############################################################################
# Define default rule if Make is run without arguments
all : $(PROGRAM) $(PROGRAM2) $(PROGRAM3) $(PROGRAM4) 

# Define rule for compiling all C++ files
$(OBJ_DIR)/%.o : $(SRC_DIR)/%.cpp
	$(CCC) $(CCCFLAGS) $(CPPFLAGS) -c $< -o $@

	
# Define rule for creating executable
$(PROGRAM) :	$(OBJ)
		@echo -n "Loading $(PROGRAM) ... "
		$(LINKER) -o $(PROGRAM) $(OBJ) $(LIBS) 
		@echo "done"

$(PROGRAM2) :	$(OBJ2)
		@echo -n "Loading $(PROGRAM2) ... "
		$(LINKER) -o $(PROGRAM2) $(OBJ2) $(LIBS) 
		@echo "done"

$(PROGRAM3) :	$(OBJ3)
		@echo -n "Loading $(PROGRAM3) ... "
		$(LINKER) -o $(PROGRAM3) $(OBJ3) $(LIBS) 
		@echo "done"

$(PROGRAM4) :	$(OBJ4)
		@echo -n "Loading $(PROGRAM4) ... "
		$(LINKER) -o $(PROGRAM4) $(OBJ4) $(LIBS) 
		@echo "done"

# Define rule to clean up directory by removing all object, temp and core
# files along with the executable
clean :
	@rm -f $(OBJ) *~ $(PROGRAM)
	@rm -f $(PROGRAM2)
	@rm -f $(PROGRAM3)
	@rm -f $(PROGRAM4)
